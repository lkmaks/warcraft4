В данной игре есть 2 расы (Horde, Human) (как те самые 2 расы из варика)
В игру играют 2 игрока, поэтому у каждого есть список подконтрольных юнитов своей расы, он также может заказывать новых.

Часть создания юнитов реализована следующим образом: есть класс юнит, общий для всех типов юнитов обеих рас. У
каждого игрока (представленного объектом класса Player) есть ссылка на объект класса UnitFactory (описан в Units.py).
Этот объект представляет собой фабрику из Factory Method и отвечает за создание юнита и расположение его на поле боя, а
также отвечает на запросы, может ли "владелец" фабрики создать того или иного юнита, поместив его в некоторую клетку
(метод creatable) и может ли создать такого юнита в принципе, без привязки к клетке (метод Affordable).
Для создания юнита объект принимает на вход только название юнита (Footman, Rifleman, etc.), а внутри обращается к
файлу с описанием всех юнитов (units_data.json) и из этих данных непосредственно собирает юнита.

Применение фабричного метода в данной ситуации основано на том, что возникает естественное желание инкапсулировать
обращение к базе данных (в данном случае - units_data.json) и создание юнита, а также проверки того, можно ли создавать
данного юнита данному игроку. Оно будет полезно и в случае расширения системы, например, если в игру добавятся апгрейды:
в таком случае, объект UnitFactory может хранить информацию о грейдах, сделанных "владельцем фабрики", и выдавать
соответствующих юнитов (то есть метод даст возможность инкапсулировать сложную часть в этот класс).